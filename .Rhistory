devtools::document()
usethis::use_vignette("Tutorial")
library(particleSwarm)
fitness <- function(x){
d <- x[1]
D <- x[2]
N <- round(x[3])
# define fitness function
fitness_value <- (N+2)*D*d^2
#define constraint
g1 <- 1 - D^3*N/(71785*d^4)
g2 <- (4*D^2-d*D)/(12566*(D * d^3 - d^4)) + 1/(5108 * d^2) - 1
g3 <- 1 - (140.45*d)/(D^2*N)
g4 <- (D+d)/1.5 - 1
#penalized constraint violation
fitness_value <- ifelse( g1 <= 0 & g2 <= 0 & g3 <= 0 & g4 <= 0, fitness_value, fitness_value + 1e3 )
return(fitness_value)
}
# Source: https://rpubs.com/Argaadya/intro-PSO
pso(
fn = fitness,
S = 100,
lb = c(0.05, 0.25, 2),
ub = c(2, 1.3, 15),
max_iter = 100
)
devtools::document()
library(particleSwarm)
pso(
fn = fitness,
S = 100,
lb = c(0.05, 0.25, 2),
ub = c(2, 1.3, 15),
max_iter = 100
)
devtools::document()
fitness <- function(x){
d <- x[1]
D <- x[2]
N <- round(x[3])
# define fitness function
fitness_value <- (N+2)*D*d^2
#define constraint
g1 <- 1 - D^3*N/(71785*d^4)
g2 <- (4*D^2-d*D)/(12566*(D * d^3 - d^4)) + 1/(5108 * d^2) - 1
g3 <- 1 - (140.45*d)/(D^2*N)
g4 <- (D+d)/1.5 - 1
#penalized constraint violation
fitness_value <- ifelse( g1 <= 0 & g2 <= 0 & g3 <= 0 & g4 <= 0, fitness_value, fitness_value + 1e3 )
return(fitness_value)
}
# Source: https://rpubs.com/Argaadya/intro-PSO
pso(
fn = fitness,
S = 100,
lb = c(0.05, 0.25, 2),
ub = c(2, 1.3, 15),
max_iter = 100
)
psoptim(rep(NA,3), fn = fitness, lower = c(0.05, 0.25, 2), upper = c(2, 1.3, 15))
library(pso)
psoptim(rep(NA,3), fn = fitness, lower = c(0.05, 0.25, 2), upper = c(2, 1.3, 15))
library(pso)
psoptim(rep(NA,3), fn = fitness, lower = c(0.05, 0.25, 2), upper = c(2, 1.3, 15), control = list(maxit = 100, s = 100, w = 0.5, c.p = 1, c.g = 1)
library(pso)
psoptim(rep(NA,3), fn = fitness, lower = c(0.05, 0.25, 2), upper = c(2, 1.3, 15), control = list(maxit = 100, s = 100, w = 0.5, c.p = 1, c.g = 1))
bench::mark(psoptim(rep(NA,3), fn = fitness, lower = c(0.05, 0.25, 2), upper = c(2, 1.3, 15), control = list(maxit = 100, s = 100, w = 0.5, c.p = 1, c.g = 1))
)
library(tidyverse)
bench::mark(psoptim(rep(NA,3), fn = fitness, lower = c(0.05, 0.25, 2), upper = c(2, 1.3, 15), control = list(maxit = 100, s = 100, w = 0.5, c.p = 1, c.g = 1))
)
install.packages("bench")
library(bench)
bench::mark(psoptim(rep(NA,3), fn = fitness, lower = c(0.05, 0.25, 2), upper = c(2, 1.3, 15), control = list(maxit = 100, s = 100, w = 0.5, c.p = 1, c.g = 1)))
library(bench)
bench::mark(psoptim(rep(NA,3), fn = fitness, lower = c(0.05, 0.25, 2), upper = c(2, 1.3, 15), control = list(maxit = 100, s = 100, w = 0.5, c.p = 1, c.g = 1)))
bench::mark(pso(
fn = fitness,
S = 100,
lb = c(0.05, 0.25, 2),
ub = c(2, 1.3, 15),
w = .5,
max_iter = 100
))
